name: workflow

on:
  push:
    branches:
      - pipeline

jobs:
  SAST:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install Dependencies
        run: yarn install
        
      - name: Setup Java JDK
        uses: actions/setup-java@main
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: SonarCloud Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          yarn sonar-scanner \
          -Dsonar.projectKey=SebaGQ_devsecops-pipeline \
          -Dsonar.organization=sebagq \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.login=${{ secrets.SONAR_TOKEN }}

      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io
        with:
          scanMetadataReportFile: .scannerwork/report-task.txt

      - name: Exit if Quality Gate fails
        if: steps.sonarqube-quality-gate-check.outputs.quality-gate-status != 'PASSED'
        run: exit 1

  SCA:
    needs: SAST
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4
  
    - name: Setup Java JDK
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Install Dependencies
      run: yarn install

    - name: Dependency Check
      id: dependency-check
      uses: dependency-check/Dependency-Check_Action@main
      env:
        JAVA_HOME: /opt/jdk
      with:
        project: '${{ github.event.repository.name }}'
        path: '.'
        format: 'SARIF'
        #--failOnCVSS 4
        args: >
        
          --enableRetired  

    - name: Upload SARIF report
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: ${{github.workspace}}/reports/dependency-check-report.sarif



  Build:
    needs: SCA
    runs-on: self-hosted
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'

    - name: Install Dependencies
      run: yarn install

    - name: Build Project
      run: yarn build

    - name: Setup Docker
      uses: docker/setup-buildx-action@v3

    - name: Docker Login
      uses: docker/login-action@v3.1.0
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
      
      #El dockerfile proporcionado pedia la key en el build, pero la key deberia pasarse en el docker run
    - name: Docker Build
      run: docker build --build-arg TMDB_V3_API_KEY=${{ secrets.TMDB_V3_API_KEY }} -t sebagq/devsecops-pipeline:latest .

    - name: Docker Push
      run: docker push sebagq/devsecops-pipeline:latest
  

  ImageAnalysis:
    needs: Build
    runs-on: ubuntu-latest

    steps:
    - name: Setup Docker
      uses: docker/setup-buildx-action@v3

    - name: Docker Login
      uses: docker/login-action@v3.1.0
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Docker Pull
      run: docker pull sebagq/devsecops-pipeline:latest
      
    - name: Trivy Scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'sebagq/devsecops-pipeline:latest'
        format: 'sarif'
        output: 'trivy-results-docker.sarif'
        # Por cambiar: porque se deben analizar todas, y despues en el check contarlas por tipo
        severity: 'CRITICAL,HIGH,MEDIUM'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results-docker.sarif'

    # Se cuentas las vulnerabilidades encontradas, y se termina el pipeline en caso de existir alguna
    - name: Check Trivy Vulnerabilities
      id: check_trivy
      run: |
        CRITICAL_COUNT=$(jq '[
          .runs[].results[] as $result |
          .runs[].tool.driver.rules[] as $rule |
          select($result.ruleId == $rule.id) |
          select($rule.properties.tags[]? == "CRITICAL")
        ] | length' trivy-results-docker.sarif)
         
        HIGH_COUNT=$(jq '[
          .runs[].results[] as $result |
          .runs[].tool.driver.rules[] as $rule |
          select($result.ruleId == $rule.id) |
          select($rule.properties.tags[]? == "HIGH")
        ] | length' trivy-results-docker.sarif)
         
        MEDIUM_COUNT=$(jq '[
          .runs[].results[] as $result |
          .runs[].tool.driver.rules[] as $rule |
          select($result.ruleId == $rule.id) |
          select($rule.properties.tags[]? == "MEDIUM")
        ] | length' trivy-results-docker.sarif)

        echo "Critical vulnerabilities: $CRITICAL_COUNT"
        echo "High vulnerabilities: $HIGH_COUNT"
        echo "Medium vulnerabilities: $MEDIUM_COUNT"

        if [ "$CRITICAL_COUNT" -gt 0 ] || [ "$HIGH_COUNT" -gt 0 ] || [ "$MEDIUM_COUNT" -gt 0 ]; then
          echo "Vulnerabilities found."
        else
          echo "No vulnerabilities found."
        fi
#   Se elimin√≥ el        
#           echo "Vulnerabilities found. Failing the job."
#           exit 1




  DAST:
    needs: ImageAnalysis
    runs-on: self-hosted
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Setup Docker
      uses: docker/setup-buildx-action@v3

    - name: Docker Login
      uses: docker/login-action@v3.1.0
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Docker Run
      run: |
        docker pull sebagq/devsecops-pipeline:latest
        docker run -d -p 80:80 --name netflix-app sebagq/devsecops-pipeline:latest
    
    - name: ZAP Scan
      uses: zaproxy/action-baseline@v0.12.0
      with:
        target: 'http://localhost:80'
        fail-action: false