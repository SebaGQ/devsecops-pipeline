name: workflow

on:
  push:
    branches:
      - pipeline

jobs:
  SAST:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install Dependencies
        run: yarn install
        
      - name: Setup Java JDK
        uses: actions/setup-java@main
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: SonarCloud Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          yarn sonar-scanner \
          -Dsonar.projectKey=SebaGQ_devsecops-pipeline \
          -Dsonar.organization=sebagq \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.login=${{ secrets.SONAR_TOKEN }}

      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io
        with:
          scanMetadataReportFile: .scannerwork/report-task.txt

      - name: Exit if Quality Gate fails
        if: steps.sonarqube-quality-gate-check.outputs.quality-gate-status != 'PASSED'
        run: exit 1

  SCA:
    needs: SAST
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4
  
    - name: Setup Java JDK
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Install Dependencies
      run: yarn install

    - name: Dependency Check
      uses: dependency-check/Dependency-Check_Action@1.1.0
      env:
        JAVA_HOME: /opt/jdk
      with:
        project: '${{ github.event.repository.name }}'
        path: '.'
        format: 'HTML'
        args: >
          --failOnCVSS 4
          --enableRetired  

    - name: Upload Test Result
      uses: actions/upload-artifact@v2
      with:
        name: 'dependency-check-report'
        path: 'reports/dependency-check-report.html'

    - name: Exit if Vulnerabilities Found
      if: failure()
      run: exit 1


  Build:
    needs: SCA
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'

    - name: Install Dependencies
      run: yarn install

    - name: Build Project
      run: yarn build

    - name: Setup Docker
      uses: docker/setup-buildx-action@v3

    - name: Docker Login
      uses: docker/login-action@v3.1.0
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
      
    - name: Docker Build
      run: docker build --build-arg TMDB_V3_API_KEY=${{ secrets.TMDB_V3_API_KEY }} -t sebagq/devsecops-pipeline:latest .

    - name: Docker Push
      run: docker push sebagq/devsecops-pipeline:latest
  

  ImageAnalysis:
    needs: Build
    runs-on: ubuntu-latest

    steps:
    - name: Setup Docker
      uses: docker/setup-buildx-action@v3

    - name: Docker Login
      uses: docker/login-action@v3.1.0
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Docker Pull
      run: docker pull sebagq/devsecops-pipeline:latest
      
    - name: Trivy Scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'sebagq/devsecops-pipeline:latest'
        format: 'template'
        template: '@/contrib/sarif.tpl'
        output: 'trivy-results-docker.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results-docker.sarif'

    - name: Upload SARIF as artifact
      uses: actions/upload-artifact@v4
      with:
        name: trivy-results-sarif
        path: trivy-results-docker.sarif

    - name: Install jq
      uses: Staphylo/jq-action@v1.0.2

    - name: Check for vulnerabilities in SARIF
      id: check_vulnerabilities
      run: |
        critical=$(jq '[.runs[].results[] | select(.ruleId as $ruleId | .runs[].tool.driver.rules[] | select(.id == $ruleId and (.properties.tags | index("CRITICAL"))))] | length' trivy-results-docker.sarif)
        high=$(jq '[.runs[].results[] | select(.ruleId as $ruleId | .runs[].tool.driver.rules[] | select(.id == $ruleId and (.properties.tags | index("HIGH"))))] | length' trivy-results-docker.sarif)
        medium=$(jq '[.runs[].results[] | select(.ruleId as $ruleId | .runs[].tool.driver.rules[] | select(.id == $ruleId and (.properties.tags | index("MEDIUM"))))] | length' trivy-results-docker.sarif)
        echo "Critical vulnerabilities: $critical"
        echo "High vulnerabilities: $high"
        echo "Medium vulnerabilities: $medium"
        if [ "$critical" -gt 0 ] || [ "$high" -gt 0 ] || [ "$medium" -gt 0 ]; then
          exit 1
        fi